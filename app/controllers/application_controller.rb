class ApplicationController < ActionController::API

  # if any request is made to this API, :authorized will always be called first
  before_action :authorized

  # When this method is invoked later, an object is sent as the argument. The method encode provided by the JWT gem will be utilized to generate a token.
  # JWT.encode takes two arguments, the payload object and a string that represents a “secret”. The method encode_token will return the token generated by JWT.

  def encode_token(payload)
    JWT.encode(payload, 's3cr3t')
  end

  # Returns token generated by JWT and will be in the format of Bearer <token>, which is what
  def auth_header
    # { Authorization: 'Bearer <token>' }
    request.headers['Authorization']
  end



  def decoded_token
    if auth_header
      # To get just the token, we will use the .split(" ")[1] method on Bearer <token>
      token = auth_header.split(' ')[1]
      # header: { 'Authorization': 'Bearer <token>' }
      begin
        # JWT.decode takes in four arguments, the token to decode, the secret string that was assigned when encoding, a true value, and the algorithm (‘HS256’ here)
        JWT.decode(token, 's3cr3t', true, algorithm: 'HS256')
        # Otherwise, if there is an error, it will return nil.
      rescue JWT::DecodeError
        []
      end
    end
  end

  # Only concerned with the headers, specifically the key of “Authorization”.
  # Ideally, this will contain a token generated by JWT and will be in the format of Bearer <token>, which is what auth_header will return.

  def logged_in_user
    if decoded_token
      # The return value for decoded_token will represent an array from JWT.decode
      # We’re only concerned with the first index, which will be an object with a key of “user_id.” (comes from User controller)
      user_id = decoded_token[0]['user_id']
      # Determine if a User instance with that specific ID exists in the database. If there is, the user is “authorized”, if not, they are not.
      @user = User.find_by(id: user_id)
    end
  end

  # returns true or false, depending on the return value of :logged_in_user
  def logged_in?
    !!logged_in_user
  end

  def require_login
    render json: {message: 'Please log in'}, status: :unauthorized unless logged_in?
  end

  # checks whether a user is authorized. If a user is not logged in or a request is not sending the necessary credentials, this method will send back a JSON response, asking them to log in.
  # To determine that information, the method logged_in? is called which checks if a user is logged in or not.

  def authorized
    render json: { message: 'Please log in' }, status: :unauthorized unless logged_in?
  end

  def session_user
    decoded_hash = decoded_token
    if !decoded_hash.empty?
      user_id = decoded_hash[0]['user_id']
      @user = User.find_by(id: user_id)
    else
      nil
    end
  end
end
