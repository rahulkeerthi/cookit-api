class UsersController < ApplicationController
  # if the auto_login route is accessed in application, the authorized method in application controller runs first
  before_action :authorized, only: [:auto_login]
  before_action :set_user, only: [:login]

  # REGISTER
  def create
    @user = User.create(user_params)
    if @user.valid?
      # encode_token will return a token string generated by JWT. A JSON object is rendered with the key-value pairs of the user and token as a response.
      payload = { user_id: @user.id }
      token = encode_token(payload)
      render json: {user: @user, jwt: token}
    else
      render json: {error: user.errors.full_messages}, status: :not_acceptable
    end
  end

  # LOGGING IN
  def login
    # the authenticate method provided by bcrypt compares if the password passed from the params and the password stored in the database match
    if @user && @user.authenticate(params[:password])
      # encode_token will return a token string generated by JWT. A JSON object is rendered with the key-value pairs of the user and token as a response.
      payload = { user_id: @user.id }
      token = encode_token(payload)
      render json: {user: @user, jwt: token, success: "Welcome back, #{@user.username}"}
    else
      render json: {error: "Invalid username or password"}
    end
  end

  def auto_login
    # Since the method, authorized, will run before auto_login, the chain of methods in the application controller will also run
    # One of the methods, logged_in_user, will return a global @user variable that is accessible.
    if session_user
      render json: session_user
    else
      render json: {errors: "No user logged in"}
    end
  end

  def user_is_authed
  end

  private

  def set_user
    @user = User.find_by(username: params[:username])
  end

  def user_params
    params.require(:user).permit(:username, :password)
  end
end
